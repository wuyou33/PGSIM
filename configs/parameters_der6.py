import numpy as np
import math

DER_num = 6
lines_num = 10
loads_num = 4
sampling_time = 0.05
state_dim = 9

pi = math.pi

# --------Parameter values--------------
Lc = .35e-3
rLc = .03
wc = 31.41
mp1 = 0.3 * 18.8e-5
mp2 = mp1
mp3 = 0.3 * 25e-5
mp4 = mp3
mp5 = mp1
mp6 = mp1
nq1 = 0.2 * 2.6e-3
nq2 = nq1
nq3 = 0.2 * 3e-3
nq4 = nq3
nq5 = nq1
nq6 = nq1

# --------------
kp = 4
ki = 40

rN = 1e4
wb = 2 * pi * 60
wref = 2 * pi * 60
Vnom = 480

# -----Network Data-------
r300 = ((480 / 24900) ** 2) * 1.3368
x300 = ((480 / 24900) ** 2) * 1.3343
r301 = ((480 / 24900) ** 2) * 1.9300
x301 = ((480 / 24900) ** 2) * 1.4115
r302 = ((480 / 24900) ** 2) * 2.7995
x302 = ((480 / 24900) ** 2) * 1.4855
r303 = ((480 / 24900) ** 2) * 2.7995
x303 = ((480 / 24900) ** 2) * 1.4855
r304 = ((480 / 24900) ** 2) * 1.9217
x304 = ((480 / 24900) ** 2) * 1.4212

rline1 = 0.000189394 * ((37500 + 29730) * r300 + 320 * r301)
Lline1 = 0.000189394 * ((37500 + 29730) * x300 + 320 * x301) / wref
rline2 = 0.000189394 * (10210 * r301)
Lline2 = 0.000189394 * (10210 * x301) / wref
rline3 = 0.000189394 * (3030 * r303)
Lline3 = 0.000189394 * (3030 * x303) / wref
rline4 = 0.000189394 * ((840 + 20440 + 520) * r301)
Lline4 = 0.000189394 * ((840 + 20440 + 520) * x301) / wref
rline5 = 0.000189394 * (23330 * r303)
Lline5 = 0.000189394 * (23330 * x303) / wref
rline6 = 0.000189394 * ((36830 + 10) * r301)
Lline6 = 0.000189394 * ((36830 + 10) * x301) / wref
rline7 = 0.000189394 * (1620 * r303)
Lline7 = 0.000189394 * (1620 * x303) / wref
rline8 = 0.000189394 * (5830 * r301)
Lline8 = 0.000189394 * (5830 * x301) / wref
rline9 = 0.000189394 * ((280 + 1350 + 3640 + 530) * r301)
Lline9 = 0.000189394 * ((280 + 1350 + 3640 + 530) * x301) / wref
rline10 = 0.000189394 * ((2020 + 2680) * r301)
Lline10 = 0.000189394 * ((2020 + 2680) * x301) / wref
rline11 = 0.000189394 * (860 * r301)
Lline11 = 0.000189394 * (860 * x301) / wref
rline12 = 0.000189394 * (280 * r301 + 4860 * r304)
Lline12 = 0.000189394 * (280 * x301 + 4860 * x304) / wref
rline13 = 0.000189394 * ((1710 + 48150 + 13740) * r302)
Lline13 = 0.000189394 * ((1710 + 48150 + 13740) * x302) / wref

Rload1 = 1.5
Lload1 = 1 / wref
Rload2 = 0.5
Lload2 = 0.5 / wref
Rload3 = 1
Lload3 = 1 / wref
Rload4 = 0.8
Lload4 = 0.8 / wref

# Controller Parameters
R1 = pi / 2
R2 = pi / 50
Etha = 10
a_ctrl = 40


# Physical Graph
AP = 6 * np.array([[.0, 1, 1, 0, 0, 0],
                   [1, 0, 1, 1, 0, 0],
                   [1, 1, 0, 0, 1, 0],
                   [0, 1, 0, 0, 1, 1],
                   [0, 0, 0, 1, 0, 1],
                   [0, 0, 0, 1, 1, 0]])

Physical_Graph = np.array([[0, 1, 1, 0, 0, 0],  # 1
                           [1, 0, 1, 1, 0, 0],  # 2
                           [1, 1, 0, 0, 1, 0],  # 3
                           [0, 1, 0, 0, 1, 1],  # 4
                           [0, 0, 0, 1, 0, 1],  # 5
                           [0, 0, 0, 1, 1, 0]])  # 6

Distance_Mask = np.array([[0, 1, 1, 2, 2, 3],  # 1
                          [1, 0, 1, 1, 2, 2],  # 2
                          [1, 1, 0, 2, 1, 2],  # 3
                          [2, 1, 2, 0, 1, 1],  # 4
                          [2, 2, 1, 1, 0, 1],  # 5
                          [3, 2, 2, 1, 1, 0]])  # 6

D = np.array([[sum(AP[0]), 0, 0, 0, 0, 0],
              [0, sum(AP[1]), 0, 0, 0, 0],
              [0, 0, sum(AP[2]), 0, 0, 0],
              [0, 0, 0, sum(AP[3]), 0, 0],
              [0, 0, 0, 0, sum(AP[4]), 0],
              [0, 0, 0, 0, 0, sum(AP[5])]])

L = D - AP

# Pinning gain to the reference frequency
G = np.array([[1, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0]])

# Initial Conditions
x0 = np.array([0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0,
               0, 0, 0, 0, 0,
               0, 0, 0, 0, 0,
               0, 0, 0, 0, 0,
               0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               wref, wref, wref, wref, wref, wref,
               Vnom, Vnom, Vnom, Vnom, Vnom, Vnom,
               0, 0, 0, 0,
               0, 0, 0, 0,
               0, 0, 0, 0,
               0, 0, 0, 0,
               0, 0, 0, 0,
               0, 0, 0, 0, ])

# Initial Conditions
x_critic = np.array([0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     wref, wref, wref, wref, wref, wref,
                     Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, 0,
                     0, 0, 0, 0,
                     0, 0, 0, 0,
                     0, 0, 0, 0,
                     0, 0, 0, 0,
                     0, 0, 0, 0,
                     0, 0, 0, 0])

mp = [mp1, mp2, mp3, mp4, mp5, mp6]
nq = [nq1, nq2, nq3, nq4, nq5, nq6]

obs_mean = np.array([[0.00000000e+00, 5.94750957e+04, 5.18826718e+04, 1.59484495e+02,
                      -1.39131987e+02, 1.58977121e+02, -1.37752942e+02, 3.50326969e+02,
                      -1.66857296e+01],
                     [-2.94964702e-03, 5.84485099e+04, 5.03222993e+04, 1.56643756e+02,
                      -1.34910554e+02, 1.56337295e+02, -1.33966792e+02, 3.51290037e+02,
                      -1.74565790e+01],
                     [-1.56892081e-02, 4.39054908e+04, 5.11862523e+04, 1.19121086e+02,
                      -1.38904635e+02, 1.17458840e+02, -1.40130448e+02, 3.47164367e+02,
                      -1.68323952e+01],
                     [-1.58780872e-02, 4.34048292e+04, 5.02168674e+04, 1.17707465e+02,
                      -1.36224549e+02, 1.16293641e+02, -1.37484136e+02, 3.47843176e+02,
                      -1.67953707e+01],
                     [-2.72605340e-04, 5.74754480e+04, 5.96003551e+04, 1.56265833e+02,
                      -1.62105917e+02, 1.56587639e+02, -1.61667359e+02, 3.42553468e+02,
                      -1.56752104e+01],
                     [-3.92235639e-04, 5.74755015e+04, 5.93884888e+04, 1.56220429e+02,
                      -1.61483242e+02, 1.56530411e+02, -1.61057580e+02, 3.42740639e+02,
                      -1.57280775e+01]])

obs_std = np.array([[1e-12, 3.86420056e+03, 4.16700891e+03, 1.05387470e+01,
                     1.09296704e+01, 4.65795588e+01, 4.12278816e+01, 1.01437007e+02,
                     4.95697466e+00],
                    [1.16677122e-03, 4.02882556e+03, 4.24164329e+03, 1.01733946e+01,
                     1.09124226e+01, 4.58190749e+01, 4.01796093e+01, 1.01715036e+02,
                     5.17413404e+00],
                    [1.98886559e-03, 3.04426481e+03, 4.03934214e+03, 7.77323806e+00,
                     1.05744803e+01, 3.43026169e+01, 4.16269469e+01, 1.00521725e+02,
                     5.02423347e+00],
                    [2.31861878e-03, 3.22645256e+03, 4.06658900e+03, 7.98839539e+00,
                     1.04757837e+01, 3.39905023e+01, 4.08615239e+01, 1.00718850e+02,
                     5.00494945e+00],
                    [2.81557239e-03, 4.38046968e+03, 4.75347347e+03, 1.08754296e+01,
                     1.22423939e+01, 4.59981011e+01, 4.79306463e+01, 9.91901033e+01,
                     4.74497259e+00],
                    [2.78095118e-03, 4.38070528e+03, 4.75270109e+03, 1.08728819e+01,
                     1.22383163e+01, 4.59788637e+01, 4.77614296e+01, 9.92454851e+01,
                     4.75863648e+00]])
